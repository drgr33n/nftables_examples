#!/usr/bin/nft -f
# Hardened workstation by Zarren Spry <zarrenspry@gmail.com>
# Hardened ruleset with SIP, docker and libvirt.

flush ruleset

define docker_target_ipv4 = 172.17.0.0/16
define docker_target_nic = docker0
define libvirt_target_ipv4 = 192.168.122.0/24
define libvirt_target_nic = virbr0
define private_ipv4_subnets = { 10.0.0.0/8, 192.168.0.0/16 }

table inet filter {
	set prv_ipv4 {
		type ipv4_addr;
		flags interval;
		elements = $private_ipv4_subnets
	}
	chain input {
		type filter hook input priority filter; policy drop;
		ct state { established, related } accept
		ct state invalid drop
		iifname "lo" accept
		ip protocol icmp accept
		ip6 nexthdr ipv6-icmp accept
		# Incomming SSH isn't normally required on workstations. You can uncomment this if required.
		# ip saddr @prv_ipv4 tcp dport ssh accept
		iifname $libvirt_target_nic counter jump libvirt_inp
		jump sip_inp
		tcp dport mdns accept
                tcp dport ntp accept
                tcp dport ssh accept
	}
	chain forward {
		type filter hook forward priority filter; policy drop;
		iifname $libvirt_target_nic oifname $libvirt_target_nic counter jump libvirt_fwx
		oifname $libvirt_target_nic counter jump libvirt_fwi
		iifname $libvirt_target_nic counter jump libvirt_fwd
		iifname $docker_target_nic oifname $docker_target_nic counter jump docker_fwx
		oifname $docker_target_nic counter jump docker_fwi
		iifname $docker_target_nic counter jump docker_fwd
	}
	chain output {
		type filter hook output priority filter; policy accept;
        	iifname $libvirt_target_nic counter jump libvirt_out
		iifname $docker_target_nic counter jump docker_out
	}
	chain docker-user {
		counter return
	}
	chain libvirt_inp {
 		tcp dport domain accept
		udp dport domain accept
		tcp dport bootps accept
		udp dport bootps accept
	}
        chain libvirt_fwi {
		ip daddr $libvirt_target_ipv4 ct state established,related accept
        }
        chain libvirt_fwd {
		ip saddr $libvirt_target_ipv4 accept
        }
        chain libvirt_fwx {
		accept
        }
        chain libvirt_out {
		udp dport domain accept
		tcp dport domain accept
		udp dport bootpc accept
		tcp dport bootpc accept
        }
        chain docker_fwi {
		ip daddr $docker_target_ipv4 ct state established,related accept
        }
        chain docker_fwd {
		ip saddr $docker_target_ipv4 accept
        }
        chain docker_fwx {
		accept
        }
        chain docker_out {
		udp dport domain accept
		tcp dport domain accept
		udp dport bootpc accept
		tcp dport bootpc accept
        }
	chain sip_inp {
		#counter udp dport iax accept
		#counter tcp dport irdmi accept
		#counter udp dport irdmi accept
		counter tcp dport sip accept
		counter udp dport sip accept
		#counter tcp dport stun accept
		#counter udp dport stun accept
	}
}

table ip nat {
	chain prerouting {
		type nat hook prerouting priority filter; policy accept;
	}
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;
		iifname $libvirt_target_nic oifname $libvirt_target_nic counter jump libvirt_prt
		ip saddr $docker_target_ipv4 counter jump docker_prt
                ip saddr $libvirt_target_ipv4 ip daddr != $libvirt_target_ipv4 masquerade
	}
        chain libvirt_prt {
		ip saddr $libvirt_target_ipv4 ip daddr 224.0.0.0/24 return
		ip saddr $libvirt_target_ipv4 ip daddr 255.255.255.255 return
		ip protocol tcp ip saddr $libvirt_target_ipv4 ip daddr != $libvirt_target_ipv4 masquerade #to :1024-65535
		ip protocol udp ip saddr $libvirt_target_ipv4 ip daddr != $libvirt_target_ipv4 masquerade #to :1024-65535
		ip saddr $libvirt_target_ipv4 ip daddr != $libvirt_target_ipv4 masquerade
	}
	chain docker_prt {
		ip daddr != $docker_target_ipv4 counter masquerade
	}
	chain output {
        	type nat hook output priority filter; policy accept;
	}
}

table ip mangle {
	chain prerouting {
		type filter hook prerouting priority mangle; policy accept;
	}
	chain input {
		type filter hook input priority mangle; policy accept;
	}
	chain forward {
		type filter hook forward priority mangle; policy accept;
	}
	chain output {
		type route hook output priority mangle; policy accept;
	}
	chain postrouting {
		type filter hook postrouting priority mangle; policy accept;
		iifname $libvirt_target_nic oifname $libvirt_target_nic counter jump libvirt_prt
	}
        chain libvirt_prt {
	}
}

table bridge filter {
	chain input {
		type filter hook input priority filter; policy accept;
	}
	chain forward {
		type filter hook forward priority filter; policy drop;
	}
	chain output {
		type filter hook input priority filter; policy accept;
	}
}

